@layout SessionLayout﻿
@page "/"

@inject HttpClient httpClient
@using CodeChallenge.Client.Infrastructure
@using CodeChallenge.Domain.Entities.Users;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager nav

<RadzenStack AlignItems="AlignItems.Center">
<RadzenTemplateForm TItem="UserLoginDto" Data=@userLogin Submit=@IniciarSesión>
    <RadzenContent>
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.DisplayH2">Iniciar sesión</RadzenText>
                    <RadzenText class="rz-message rz-messages-error" TextStyle="TextStyle.Body1">@alert</RadzenText>

                    <RadzenText TextStyle="TextStyle.Body2">Correo Electrónico</RadzenText>
                    <RadzenTextBox @bind-Value="userLogin.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Escriba un correo válido" Popup=false />

                    <RadzenText TextStyle="TextStyle.Body2">Contraseña</RadzenText>
                    <RadzenPassword @bind-Value="userLogin.Password" Name="Password" />
                    <RadzenRequiredValidator Component="Password" Text="La contraseña es requerida" Popup=false />

                    <RadzenButton Text="Iniciar sesión" ButtonType="ButtonType.Submit" />
                    <RadzenText TextStyle="TextStyle.Body2">¿No tienes cuenta? <a href="/Signup">Regístrate</a></RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenContent>
    </RadzenTemplateForm>
</RadzenStack>


@code{
    protected UserLoginDto userLogin = new UserLoginDto();
    protected string alert { get; set; } = string.Empty;


    private async Task IniciarSesión()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<UserLoginDto>("/api/users/login", userLogin);
        var sesionUsuario = await loginResponse.Content.ReadFromJsonAsync<User>();

        if (!string.IsNullOrEmpty(sesionUsuario.Email))
        {
            var autenticacionExt = (Autentication)autenticacionProvider;
            await autenticacionExt.UpdateAutenticacionState(sesionUsuario);

            nav.NavigateTo("/Index");
        }
        else
        {
            alert = "Usuario o contraseña inválida";
        }
        
    }
}



